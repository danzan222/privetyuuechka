variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY


.send_message: &send_message
  cache: {}
  image: curlimages/curl:latest
  script:
    - if [ "$TELEGRAM_BOT_TOKEN" == "" ]; then
    -   echo "$message"
    - else
    - '  echo "Sending ''$message'' to $TELEGRAM_CHAT_ID"'
    - '  curl -X POST --data-urlencode chat_id="$TELEGRAM_CHAT_ID" --data-urlencode text="$message" --data-urlencode parse_mode="HTML" --data-urlencode disable_web_page_preview=true https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage'
    - fi


notify_start:
  stage: .pre
  before_script:
    - 'message="Starting CI job <a href=\"$CI_PIPELINE_URL\">$CI_PIPELINE_IID</a> for <a href=\""'
    - 'if [ "$CI_MERGE_REQUEST_IID" == "" ]; then'
    - '  message="$message$CI_PROJECT_URL"'
    - else
    - '  message="$message$CI_MERGE_REQUEST_SOURCE_PROJECT_URL"'
    - fi
    - 'message="$message/-/commit/$CI_COMMIT_SHA\">$CI_PROJECT_NAME/$CI_COMMIT_SHORT_SHA</a>"'
    - 'if [ "$CI_MERGE_REQUEST_IID" != "" ]; then'
    - '  message="$message (that''s <a href=\"$CI_MERGE_REQUEST_TARGET_PROJECT_URL/-/merge_requests/$CI_MERGE_REQUEST_IID\">!$CI_MERGE_REQUEST_IID</a>)"'
    - fi
  <<: *send_message


build_image:
  image: docker:stable
  services:
    - docker:stable-dind
  stage: build
  script:
    - MAIN_IMAGE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - TEST_IMAGE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-test
    - docker build --pull --target=main -t $MAIN_IMAGE_TAG .
    - docker build --pull --target=test -t $TEST_IMAGE_TAG .
    - docker push $MAIN_IMAGE_TAG
    - docker push $TEST_IMAGE_TAG


test_image:
  image: docker:stable
  services:
    - docker:stable-dind
  script:
    - TEST_IMAGE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-test
    - docker pull $TEST_IMAGE_TAG
    - docker run -e TEST_BOT_TOKEN $TEST_IMAGE_TAG


publish_image:
  rules:
    - if: $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH
  image: docker:stable
  services:
    - docker:stable-dind
  stage: deploy
  script:
    - MAIN_IMAGE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - RELEASE_IMAGE_TAG=$CI_REGISTRY_IMAGE:latest
    - docker pull $MAIN_IMAGE_TAG
    - docker tag $MAIN_IMAGE_TAG $RELEASE_IMAGE_TAG
    - docker push $RELEASE_IMAGE_TAG

notify_success:
  rules:
    - when: on_success
  stage: .post
  before_script:
    - message="Job $CI_PIPELINE_IID <b>passed</b>!"
  <<: *send_message

notify_failure:
  rules:
    - when: on_failure
  stage: .post
  before_script:
    - message="Job $CI_PIPELINE_IID <b>failed</b>! <a href=\"$CI_PIPELINE_URL\">See the full output</a>"
  <<: *send_message
